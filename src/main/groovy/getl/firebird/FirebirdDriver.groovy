/*
 GETL - based package in Groovy, which automates the work of loading and transforming data. His name is an acronym for "Groovy ETL".

 GETL is a set of libraries of pre-built classes and objects that can be used to solve problems unpacking,
 transform and load data into programs written in Groovy, or Java, as well as from any software that supports
 the work with Java classes.

 Copyright (C) EasyData Company LTD

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License and
 GNU Lesser General Public License along with this program.
 If not, see <http://www.gnu.org/licenses/>.
*/

package getl.firebird

import getl.data.Dataset
import getl.driver.Driver
import getl.jdbc.JDBCDriver
import groovy.transform.InheritConstructors

/**
 * Firebird driver class
 * @author Alexsey Konstantinov
 *
 */
class FirebirdDriver extends JDBCDriver{
    FirebirdDriver() {
        super()

        connectionParamBegin = '?'
        connectionParamJoin = ';'

        sqlAutoIncrement = "GENERATED BY DEFAULT AS IDENTITY"
        commitDDL = true
        transactionalDDL = true
    }

    @SuppressWarnings("UnnecessaryQualifiedReference")
    @Override
    List<Driver.Support> supported() {
        return super.supported() +
                [Driver.Support.GLOBAL_TEMPORARY,
                 Driver.Support.SEQUENCE, Driver.Support.BLOB, Driver.Support.INDEX,
                 Driver.Support.TIME, Driver.Support.DATE,
                 Driver.Support.BOOLEAN] -
                [Driver.Support.DEFAULT_VALUE, Driver.Support.COMPUTE_FIELD] /* TODO: rewrite for create table when DEFAULT before NOT NULL */
    }

    @SuppressWarnings("UnnecessaryQualifiedReference")
    @Override
    List<Driver.Operation> operations() {
        return super.operations() +
                [Driver.Operation.DROP, Driver.Operation.EXECUTE,
                 Driver.Operation.CREATE]
    }

    @Override
    String defaultConnectURL () {
        return 'jdbc:firebirdsql://{host}/{database}'
    }

    @SuppressWarnings("UnnecessaryQualifiedReference")
    @Override
    Map getSqlType () {
        Map res = super.getSqlType()
        res.BLOB.useLength = JDBCDriver.sqlTypeUse.NEVER

        return res
    }

    @Override
    void sqlTableDirective (Dataset dataset, Map params, Map dir) {
        super.sqlTableDirective(dataset, params, dir)

        if (params.offs != null) {
            dir.afterOrderBy = ((dir.afterOrderBy != null)?(dir.afterOrderBy + '\n'):'') + "OFFSET ${params.offs} ROWS"
            params.offs = null
        }

        if (params.limit != null) {
            dir.afterOrderBy = ((dir.afterOrderBy != null) ? (dir.afterOrderBy + '\n') : '') + "FETCH FIRST ${params.limit} ROWS ONLY"
            params.limit = null
        }
    }

    @Override
    boolean blobReadAsObject() { return false }

    @Override
    String getSysDualTable() { return 'RDB$DATABASE' }

    /** Next value sequence sql script */
    @Override
    protected String sqlSequenceNext(String sequenceName) { "SELECT NEXT VALUE FOR ${sequenceName} AS id FROMM $sysDualTable" }

    @Override
    String getNowFunc() { 'cast(\'NOW\' as timestamp)' }
}