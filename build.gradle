apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'

//noinspection GroovyUnusedAssignment
version = "4.1.0-20191201-164000-SNAPSHOT" //noinspection GroovyUnusedAssignment
group = 'net.sourceforge.getl'

configurations {
	addJars
	deployerJars
}

repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	compile 'org.codehaus.groovy:groovy-all:2.5.8'
	compile 'org.codehaus.groovy:groovy-dateutil:2.5.8'

	addJars 'net.sf.supercsv:super-csv-java8:2.4.0'
	compile 'com.h2database:h2:1.4.200'
	compile 'net.lingala.zip4j:zip4j:2.2.3'
	compile 'com.sun.mail:smtp:1.6.4'
	compile 'com.sun.mail:mailapi:1.6.4'

	addJars files('file:libs/ftp4j-1.7.2.jar')
	addJars files('file:libs/jsch-0.1.53x.jar')

	compile fileTree(dir: 'jdbc')

	compile 'com.typesafe:config:1.4.0'

	compile ('org.apache.poi:poi-ooxml:4.1.1') {
		exclude group: 'stax'
	}
	compile 'org.apache.poi:ooxml-schemas:1.4'
	compile 'org.apache.hadoop:hadoop-auth:3.2.1'
	compile 'org.apache.hadoop:hadoop-hdfs-client:3.2.1'
	compile 'org.apache.hadoop:hadoop-common:3.2.1'
	
	implementation 'com.fasterxml:aalto-xml:1.2.2'
	
	compile group: 'com.force.api', name: 'force-partner-api', version: '47.0.0'

	compile 'com.github.xeroapi:xero-java:2.1.3'
	compile 'com.github.xeroapi:xeroapi-schemas:1.0.0'

	configurations.compile.extendsFrom(configurations.addJars)

	deployerJars "org.apache.maven.wagon:wagon-http:3.3.3"
	testCompile group: 'junit', name: 'junit', version: '4.12'
	testCompile fileTree(dir: 'tests', include: '**/*.jar')
}

tasks.withType(GroovyCompile) {
  groovyOptions.optimizationOptions.indy = false
}

task copyDependencies(type: Copy) {
    from configurations.runtime
     into "${project.buildDir}/libs.jar"
}

signing {
	required { gradle.taskGraph.hasTask("uploadArchives") }
	sign configurations.archives
}

jar {
	from configurations.addJars.collect { it.isDirectory() ? it : zipTree(it) }
	from { ['docs/getl.readme.txt', 'docs/getl.license.txt', 'docs/getl.license_rus.txt'] }
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
	classifier = 'javadoc'
	from groovydoc.destinationDir
}

artifacts {
	archives javadocJar, sourcesJar
}

build.dependsOn sourcesJar
build.dependsOn javadocJar

//noinspection GroovyMissingReturnStatement
uploadArchives {
	def login = project.properties."mavenLogin"
	def password = project.properties."mavenPassword"
	def repRelease = project.properties."mavenRepRelease"
	def repSnapshot = project.properties."mavenRepSnapshot"

	repositories.mavenDeployer {
		//noinspection
		beforeDeployment { deployment -> signing.signPom(deployment) }

		configuration = configurations.deployerJars

		repository(url: repRelease) {
			authentication(userName: login, password: password)
		}

		snapshotRepository(url: repSnapshot) {
			authentication(userName: login, password: password)
		}

		pom.project {
			inceptionYear '2019'
			packaging 'jar'
			name 'getl'
			artifactId 'getl'
			groupId 'net.sourceforge.getl'
			description 'GETL - based package in Groovy, which automates the work of loading and transforming data'
			url 'https://github.com/ascrus/getl'

			licenses {
				license {
					name 'GNU GENERAL PUBLIC LICENSE, Version 3'
					url 'http://www.gnu.org/licenses/gpl.txt'
					distribution 'repo'
				}
			}

			scm {
				url 'https://github.com/ascrus/getl.git'
			}

			developers {
				developer {
					id 'owner'
					name 'Aleksey Konstantinov'
					email 'ascrus@easydata.ru'
					timezone 'UTC+3'
				}
			}
		}
	}
}

//noinspection GroovyMissingReturnStatement
/*
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment -> signing.signPom(deployment) }
            configuration = configurations.deployerJars
            repository(url: mavenLocal().url)
            pom.groupId = rootProject.group
            pom.artifactId = project.name
            pom.version = rootProject.version
        }
    }
}
*/