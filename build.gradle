import java.time.LocalDateTime

plugins {
    id 'groovy'
    id 'maven'
    id 'signing'
}

//noinspection GroovyUnusedAssignment
version = '4.7.10' //noinspection GroovyUnusedAssignment
group = 'net.sourceforge.getl'

configurations {
	addJars
	deployerJars
}

repositories {
	mavenCentral()
}

dependencies {
	compile('org.codehaus.groovy:groovy-all:3.0.8') {
		exclude(group: 'org.codehaus.groovy', module: 'groovy-testng')
	}
	compile 'org.codehaus.groovy:groovy-dateutil:3.0.8'
	compile 'org.codehaus.groovy:groovy-yaml:3.0.8'
	compile 'com.fasterxml.jackson.core:jackson-annotations:2.11.2'

	addJars 'net.sf.supercsv:super-csv-java8:2.4.0'
	addJars 'com.h2database:h2:1.4.200'
	addJars 'net.lingala.zip4j:zip4j:2.6.1'
	addJars 'com.sun.mail:smtp:1.6.5'
	addJars 'com.sun.mail:mailapi:1.6.5'
	addJars 'com.jcraft:jsch:0.1.55'

	addJars files('file:libs/ftp4j-1.7.2.jar')

	compile fileTree(dir: 'jdbc')

	implementation 'com.typesafe:config:1.4.0'

	implementation('org.apache.poi:poi-ooxml:4.1.2') {
		exclude group: 'stax'
	}
	implementation('com.monitorjbl:xlsx-streamer:2.1.0')

	implementation 'org.apache.poi:ooxml-schemas:1.4'
	implementation 'org.apache.hadoop:hadoop-auth:3.3.0'
	implementation 'org.apache.hadoop:hadoop-hdfs-client:3.3.0'
	implementation 'org.apache.hadoop:hadoop-common:3.3.0'

	implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '2.6.0'

	implementation(group: 'com.force.api', name: 'force-partner-api', version: '49.3.0')

	implementation 'com.github.xeroapi:xero-java:2.1.3'
	implementation 'com.github.xeroapi:xeroapi-schemas:1.0.0'

	configurations.compile.extendsFrom(configurations.addJars)

	deployerJars "org.apache.maven.wagon:wagon-http:3.4.1"
	testImplementation  group: 'junit', name: 'junit', version: '4.13'
	testImplementation  fileTree(dir: 'tests', include: '**/*.jar')
}

test {
	jvmArgs '-Xmx16g' //, '-XX:+CMSClassUnloadingEnabled', '-XX:+UseParallelGC', '-XX:MaxPermSize=1g'

	System.properties.each { String k, String v ->
		if (k.matches('getl[-]vars[.].+'))
			systemProperty k, v
	}
}

tasks.withType(GroovyCompile) {
  groovyOptions.optimizationOptions.indy = false
  options.incremental = true
  groovyOptions.fork = true
/*'-Dgroovy.antlr4=false'*/
  groovyOptions.forkOptions.jvmArgs += ['-Xmx2g', '-Dgroovy.antlr4.cache.threshold=250']
}

task copyDependencies(type: Copy) {
    from configurations.runtime
     into "${project.buildDir}/libs.jar"
}

signing {
	required { gradle.taskGraph.hasTask("uploadArchives") }
	sign configurations.archives
}

jar {
	from configurations.addJars.collect { it.isDirectory() ? it : zipTree(it) }
	from { ['licenses/getl.readme.txt', 'licenses/getl.license.txt', 'licenses/getl.license_rus.txt'] }
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
	classifier = 'javadoc'
	from groovydoc.destinationDir
}

artifacts {
	archives javadocJar, sourcesJar
}

build.dependsOn sourcesJar
build.dependsOn javadocJar

//noinspection GroovyMissingReturnStatement
uploadArchives {
	def login = project.properties."mavenLogin"
	def password = project.properties."mavenPassword"
	def repRelease = project.properties."mavenRepRelease"
	def repSnapshot = project.properties."mavenRepSnapshot"

	repositories.mavenDeployer {
		//noinspection
		beforeDeployment { deployment -> signing.signPom(deployment) }

		configuration = configurations.deployerJars

		repository(url: repRelease) {
			authentication(userName: login, password: password)
		}

		snapshotRepository(url: repSnapshot) {
			authentication(userName: login, password: password)
		}

		pom.project {
			inceptionYear '2020'
			packaging 'jar'
			name 'getl'
			artifactId 'getl'
			groupId 'net.sourceforge.getl'
			description 'GETL - based package in Groovy, which automates the work of loading and transforming data'
			url 'https://github.com/ascrus/getl'

			licenses {
				license {
					name 'GNU GENERAL PUBLIC LICENSE, Version 3'
					url 'http://www.gnu.org/licenses/gpl.txt'
					distribution 'repo'
				}
			}

			scm {
				url 'https://github.com/ascrus/getl.git'
			}

			developers {
				developer {
					id 'owner'
					name 'Aleksey Konstantinov'
					email 'ascrus@easydata.ru'
					timezone 'UTC+3'
				}
			}
		}
	}
}

processResources.dependsOn "generateProjectConfig"

task("generateProjectConfig") {
	def resDir = "$buildDir/resources/main"
	doLast {
		file(resDir).mkdirs()
		def curYear = LocalDateTime.now().year
		file("$resDir/getl.conf").text = """/* 
Getl Configuration File
Generated: ${LocalDateTime.now().format('yyyy-MM-dd HH:mm')} 
*/
getl {
  jar {
    version='$version'
    year='2012-${LocalDateTime.now().year}'
  }
}
"""
	}
}

task toPackage(type: Zip) {
	archiveFileName = project.name + '-' + project.version + '.zip'
	from jar.archiveFile
	from fileTree('reports')
}

jar.finalizedBy toPackage